/*
 * This file is generated by jOOQ.
*/
package micropost.data.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import micropost.data.Indexes;
import micropost.data.Keys;
import micropost.data.Public;
import micropost.data.tables.records.MicropostRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Micropost extends TableImpl<MicropostRecord> {

    private static final long serialVersionUID = -414681291;

    /**
     * The reference instance of <code>public.micropost</code>
     */
    public static final Micropost MICROPOST = new Micropost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MicropostRecord> getRecordType() {
        return MicropostRecord.class;
    }

    /**
     * The column <code>public.micropost.id</code>.
     */
    public final TableField<MicropostRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('micropost_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.micropost.content</code>.
     */
    public final TableField<MicropostRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.micropost.created_at</code>.
     */
    public final TableField<MicropostRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.micropost.user_id</code>.
     */
    public final TableField<MicropostRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * Create a <code>public.micropost</code> table reference
     */
    public Micropost() {
        this(DSL.name("micropost"), null);
    }

    /**
     * Create an aliased <code>public.micropost</code> table reference
     */
    public Micropost(String alias) {
        this(DSL.name(alias), MICROPOST);
    }

    /**
     * Create an aliased <code>public.micropost</code> table reference
     */
    public Micropost(Name alias) {
        this(alias, MICROPOST);
    }

    private Micropost(Name alias, Table<MicropostRecord> aliased) {
        this(alias, aliased, null);
    }

    private Micropost(Name alias, Table<MicropostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MICROPOST_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MicropostRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MICROPOST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MicropostRecord> getPrimaryKey() {
        return Keys.MICROPOST_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MicropostRecord>> getKeys() {
        return Arrays.<UniqueKey<MicropostRecord>>asList(Keys.MICROPOST_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MicropostRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MicropostRecord, ?>>asList(Keys.MICROPOST__MICROPOST_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Micropost as(String alias) {
        return new Micropost(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Micropost as(Name alias) {
        return new Micropost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Micropost rename(String name) {
        return new Micropost(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Micropost rename(Name name) {
        return new Micropost(name, null);
    }
}
