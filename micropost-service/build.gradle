buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0"
        classpath "nu.studer:gradle-jooq-plugin:2.0.11"
    }
}

version "0.1"
group "micropost"

apply plugin:"io.spring.dependency-management"
apply plugin:"com.github.johnrengelman.shadow"
apply plugin:"application"
apply plugin:"java"
apply plugin:"kotlin"
apply plugin:"kotlin-kapt"
apply plugin:"org.junit.platform.gradle.plugin"
apply plugin:"nu.studer.jooq"

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
    maven { url "https://jcenter.bintray.com" }
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:bom:1.0.0.M1'
    }
}

dependencies {

    annotationProcessor "io.micronaut:inject-java"

    compile(
            "io.micronaut:http-client",
            "io.micronaut:http-server-netty",
            "io.micronaut.configuration:jdbc-hikari",
            "io.micronaut:inject",
            "io.micronaut:runtime",
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
            "org.jooq:jooq",
    )

    //compile(Only) -> kapt order is mandatory
    compile "org.mapstruct:mapstruct-jdk8:$mapstructVersion"
    kapt "org.mapstruct:mapstruct-processor:$mapstructVersion"

    compileOnly "io.micronaut:inject-java"
    kapt "io.micronaut:inject-java"

    runtime (
            "ch.qos.logback:logback-classic:1.2.3",
            "org.postgresql:postgresql:$postgresqlVersion",
    )
    jooqRuntime "org.postgresql:postgresql:$postgresqlVersion"

    testCompile (
            "junit:junit:$junitVersion",
            "io.micronaut:inject-java",
            "org.jetbrains.spek:spek-api:$spekVersion"
    )

    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
}

shadowJar {
    mergeServiceFiles()
}

mainClassName = "micropost.Application"
compileJava.options.compilerArgs += '-parameters'
compileTestJava.options.compilerArgs += '-parameters'

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = jvmTargetVersion
}

compileTestKotlin {
    kotlinOptions.jvmTarget = jvmTargetVersion
}


// gradle generateDbJooqSchemaSource --rerun-tasks
jooq {
    db(sourceSets.main) {
        jdbc {
            driver = dbDriver
            url = dbUrl
            user = dbUser
            password = dbPassword
        }
        generator {
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'
                includes = '.*'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                daos = true
                immutablePojos = true
                fluentSetters = true
                javaTimeTypes = true
            }
            target {
                packageName = 'micropost.data'
                directory = 'src/main/java'
            }
        }
    }
}
cleanGenerateDbJooqSchemaSource.enabled = true
generateDbJooqSchemaSource.enabled = true
