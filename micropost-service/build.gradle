buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0"
        classpath "nu.studer:gradle-jooq-plugin:2.0.11"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.5"
    }
}

version "0.1"
group "micropost"

apply plugin: "io.spring.dependency-management"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "application"
apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "kotlin-kapt"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: "nu.studer.jooq"
apply plugin: "com.google.protobuf"

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
    maven { url "https://jcenter.bintray.com" }
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {

    annotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"

    compile(
            "io.micronaut:micronaut-http-client:$micronautVersion",
            "io.micronaut:micronaut-http-server-netty:$micronautVersion",
            "io.micronaut.configuration:micronaut-jdbc-hikari:1.2.3",
            "io.micronaut:micronaut-inject:$micronautVersion",
            "io.micronaut:micronaut-runtime:$micronautVersion",
            "io.micronaut.configuration:micronaut-hibernate-validator:1.1.4",

            "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",

            "org.jooq:jooq:3.10.4",

            "org.springframework.hateoas:spring-hateoas:0.25.0.RELEASE",

            "io.grpc:grpc-netty-shaded:$grpcVersion",
            "io.grpc:grpc-protobuf:$grpcVersion",
            "io.grpc:grpc-stub:$grpcVersion",
    )

    //compile(Only) -> kapt order is mandatory
    compile "org.mapstruct:mapstruct-jdk8:$mapstructVersion"
    kapt "org.mapstruct:mapstruct-processor:$mapstructVersion"

    compileOnly "io.micronaut:micronaut-inject-java:$micronautVersion"
    kapt "io.micronaut:micronaut-inject-java:$micronautVersion"

    runtime (
            "ch.qos.logback:logback-classic:1.2.3",
            "org.postgresql:postgresql:$postgresqlVersion",
    )
    jooqRuntime "org.postgresql:postgresql:$postgresqlVersion"

    testCompile (
            "org.jetbrains.spek:spek-api:$spekVersion",
            "com.jayway.jsonpath:json-path-assert:2.4.0",
            "org.hamcrest:hamcrest-core:1.3",
    )

    testCompileOnly "io.micronaut:micronaut-inject-java:$micronautVersion"
    kaptTest "io.micronaut:micronaut-inject-java:$micronautVersion"

    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
}

shadowJar {
    mergeServiceFiles()
}

mainClassName = "micropost.Application"
compileJava.options.compilerArgs += '-parameters'
compileTestJava.options.compilerArgs += '-parameters'

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = jvmTargetVersion
}

compileTestKotlin {
    kotlinOptions.jvmTarget = jvmTargetVersion
}


// gradle generateDbJooqSchemaSource --rerun-tasks
jooq {
    db(sourceSets.main) {
        jdbc {
            driver = dbDriver
            url = dbUrl
            user = dbUser
            password = dbPassword
        }
        generator {
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'
                includes = '.*'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                daos = true
                immutablePojos = true
                fluentSetters = true
                javaTimeTypes = true
            }
            target {
                packageName = 'micropost.data'
                directory = 'src/main/java'
            }
        }
    }
}
cleanGenerateDbJooqSchemaSource.enabled = true
generateDbJooqSchemaSource.enabled = true


sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}


protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all().each {
            it.group = 'proto'
            it.plugins {
                grpc {}
            }
        }
    }
}